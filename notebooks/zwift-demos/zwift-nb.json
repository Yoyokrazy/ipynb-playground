{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d682f8d6",
   "metadata": {},
   "source": [
    "# Zwift Cycling Performance Analysis\n",
    "\n",
    "This notebook analyzes cycling performance data from a Zwift GPX file, focusing on power metrics and other performance indicators. We'll extract, process, and visualize the data to gain insights into the cycling session."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dd5da22a",
   "metadata": {},
   "source": [
    "## Import Required Libraries\n",
    "\n",
    "First, we'll import the necessary libraries for working with GPX data, data manipulation, and visualization."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a42e7140",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Install required packages\n",
    "%pip install gpxpy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ea8afd39",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import required libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import gpxpy\n",
    "from datetime import datetime\n",
    "import os\n",
    "\n",
    "# Set plot style\n",
    "plt.style.use('ggplot')\n",
    "sns.set_context(\"notebook\", font_scale=1.2)\n",
    "\n",
    "# Display plots inline\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc4823eb",
   "metadata": {},
   "source": [
    "## Load and Parse GPX Data\n",
    "\n",
    "Next, we'll load the GPX file that contains our Zwift cycling data and parse it to extract the relevant information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "79d822f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define the path to the GPX file\n",
    "gpx_file_path = 'data/zwift-data.gpx'  # Path to data folder within zwift-demos\n",
    "\n",
    "# Check if the file exists\n",
    "if os.path.isfile(gpx_file_path):\n",
    "    print(f\"GPX file found: {gpx_file_path}\")\n",
    "else:\n",
    "    # Try absolute path since we know the project structure\n",
    "    gpx_file_path = 'c:/Users/milively/Documents/_dev_work/playground-0/notebooks/zwift-demos/data/zwift-data.gpx'\n",
    "    if os.path.isfile(gpx_file_path):\n",
    "        print(f\"GPX file found at absolute path: {gpx_file_path}\")\n",
    "    else:\n",
    "        print(f\"GPX file not found. Please check the file path.\")\n",
    "\n",
    "# Display the first few lines of the GPX file to understand its structure\n",
    "try:\n",
    "    with open(gpx_file_path, 'r') as gpx_file:\n",
    "        lines = gpx_file.readlines()[:20]  # First 20 lines\n",
    "        print(\"\\nFirst few lines of the GPX file:\")\n",
    "        print(''.join(lines))\n",
    "except Exception as e:\n",
    "    print(f\"Error reading file: {e}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "da99af4d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Parse the GPX file using gpxpy\n",
    "try:\n",
    "    with open(gpx_file_path, 'r') as gpx_file:\n",
    "        gpx = gpxpy.parse(gpx_file)\n",
    "\n",
    "    print(f\"GPX file parsed successfully!\")\n",
    "    print(f\"Track name: {gpx.tracks[0].name if gpx.tracks else 'No track name found'}\")\n",
    "    print(f\"Number of track segments: {len(gpx.tracks[0].segments) if gpx.tracks else 0}\")\n",
    "    print(f\"Number of trackpoints: {len(gpx.tracks[0].segments[0].points) if gpx.tracks and gpx.tracks[0].segments else 0}\")\n",
    "\n",
    "    # Get the first point to check available data\n",
    "    if gpx.tracks and gpx.tracks[0].segments and gpx.tracks[0].segments[0].points:\n",
    "        first_point = gpx.tracks[0].segments[0].points[0]\n",
    "        print(f\"\\nSample point data:\")\n",
    "        print(f\"  Time: {first_point.time}\")\n",
    "        print(f\"  Latitude: {first_point.latitude}\")\n",
    "        print(f\"  Longitude: {first_point.longitude}\")\n",
    "        print(f\"  Elevation: {first_point.elevation}\")\n",
    "\n",
    "        # Check for extensions (power, heart rate, cadence)\n",
    "        if hasattr(first_point, 'extensions'):\n",
    "            print(f\"\\nExtensions available: {first_point.extensions}\")\n",
    "\n",
    "            # Try to extract power data from the first point\n",
    "            if first_point.extensions and 'power' in str(first_point.extensions):\n",
    "                print(\"Power data is available!\")\n",
    "except Exception as e:\n",
    "    print(f\"Error parsing GPX file: {e}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "04996b25",
   "metadata": {},
   "source": [
    "## Extract Cycling Performance Data\n",
    "\n",
    "Now that we've confirmed the GPX file contains the necessary data, let's extract the power, heart rate, cadence, and other metrics into a structured DataFrame for analysis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e3a76961",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Extract data from GPX file into a pandas DataFrame\n",
    "def extract_data_from_gpx(gpx):\n",
    "    data = []\n",
    "\n",
    "    # Extract data from each track point\n",
    "    for track in gpx.tracks:\n",
    "        for segment in track.segments:\n",
    "            for point in segment.points:\n",
    "                point_data = {\n",
    "                    'timestamp': point.time,\n",
    "                    'latitude': point.latitude,\n",
    "                    'longitude': point.longitude,\n",
    "                    'elevation': point.elevation,\n",
    "                    'power': None,\n",
    "                    'heart_rate': None,\n",
    "                    'cadence': None\n",
    "                }\n",
    "\n",
    "                # Extract extensions data (power, heart rate, cadence)\n",
    "                if hasattr(point, 'extensions') and point.extensions:\n",
    "                    # Convert extensions to string for easier parsing\n",
    "                    ext_str = str(point.extensions)\n",
    "\n",
    "                    # Extract power (direct extension)\n",
    "                    if 'power' in ext_str:\n",
    "                        # Find power tag in extensions\n",
    "                        for ext in point.extensions:\n",
    "                            if ext.tag == 'power':\n",
    "                                try:\n",
    "                                    point_data['power'] = int(ext.text)\n",
    "                                except (ValueError, TypeError):\n",
    "                                    pass\n",
    "\n",
    "                    # Extract heart rate and cadence (in TrackPointExtension)\n",
    "                    if 'TrackPointExtension' in ext_str:\n",
    "                        for ext in point.extensions:\n",
    "                            # Look for TrackPointExtension namespace\n",
    "                            if 'TrackPointExtension' in ext.tag:\n",
    "                                for child in ext:\n",
    "                                    if 'hr' in child.tag:\n",
    "                                        try:\n",
    "                                            point_data['heart_rate'] = int(child.text)\n",
    "                                        except (ValueError, TypeError):\n",
    "                                            pass\n",
    "                                    elif 'cad' in child.tag:\n",
    "                                        try:\n",
    "                                            point_data['cadence'] = int(child.text)\n",
    "                                        except (ValueError, TypeError):\n",
    "                                            pass\n",
    "\n",
    "                data.append(point_data)\n",
    "\n",
    "    # Create DataFrame\n",
    "    df = pd.DataFrame(data)\n",
    "\n",
    "    # Convert timestamp to datetime if it isn't already\n",
    "    if not pd.api.types.is_datetime64_any_dtype(df['timestamp']):\n",
    "        df['timestamp'] = pd.to_datetime(df['timestamp'])\n",
    "\n",
    "    return df\n",
    "\n",
    "# Extract data from the loaded GPX file\n",
    "try:\n",
    "    df_cycling = extract_data_from_gpx(gpx)\n",
    "\n",
    "    # Display basic information about the DataFrame\n",
    "    print(f\"Data extracted successfully! DataFrame shape: {df_cycling.shape}\")\n",
    "    print(\"\\nFirst 5 rows:\")\n",
    "    display(df_cycling.head())\n",
    "\n",
    "    # Display summary statistics\n",
    "    print(\"\\nSummary statistics:\")\n",
    "    display(df_cycling.describe())\n",
    "\n",
    "    # Check for missing values\n",
    "    print(\"\\nMissing values per column:\")\n",
    "    display(df_cycling.isna().sum())\n",
    "\n",
    "except Exception as e:\n",
    "    print(f\"Error extracting data: {e}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "606b25e8",
   "metadata": {},
   "source": [
    "## Power Data Analysis\n",
    "\n",
    "Let's analyze the power data to understand your cycling performance. We'll calculate key metrics like average power, normalized power, and examine power distribution and zones."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "41f8a89e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate basic power metrics\n",
    "\n",
    "# Duration of the activity in minutes\n",
    "activity_duration_seconds = (df_cycling['timestamp'].max() - df_cycling['timestamp'].min()).total_seconds()\n",
    "activity_duration_minutes = activity_duration_seconds / 60\n",
    "\n",
    "# Basic power metrics\n",
    "average_power = df_cycling['power'].mean()\n",
    "max_power = df_cycling['power'].max()\n",
    "median_power = df_cycling['power'].median()\n",
    "\n",
    "# Power to weight ratio (assuming weight of 75kg - adjust as needed)\n",
    "rider_weight_kg = 75  # Adjust this to your actual weight\n",
    "power_to_weight = average_power / rider_weight_kg\n",
    "\n",
    "# Print results\n",
    "print(f\"Activity Duration: {activity_duration_minutes:.1f} minutes\")\n",
    "print(f\"\\nPower Metrics:\")\n",
    "print(f\"  Average Power: {average_power:.1f} watts\")\n",
    "print(f\"  Maximum Power: {max_power} watts\")\n",
    "print(f\"  Median Power: {median_power} watts\")\n",
    "print(f\"  Power-to-Weight Ratio: {power_to_weight:.2f} watts/kg\")\n",
    "\n",
    "# Calculate power zones (based on FTP - assuming FTP is 95% of 20min max power, but you can adjust)\n",
    "# For demonstration, let's estimate FTP as 95% of average power + 20% (just as an example)\n",
    "# In practice, you would use your known FTP or calculate it properly\n",
    "estimated_ftp = average_power * 1.15  # This is just a rough estimate for demonstration\n",
    "\n",
    "print(f\"\\nEstimated FTP (for zone calculations): {estimated_ftp:.1f} watts\")\n",
    "\n",
    "# Define traditional power zones\n",
    "power_zones = {\n",
    "    'Zone 1 (Recovery)': (0, 0.55 * estimated_ftp),\n",
    "    'Zone 2 (Endurance)': (0.55 * estimated_ftp, 0.75 * estimated_ftp),\n",
    "    'Zone 3 (Tempo)': (0.75 * estimated_ftp, 0.90 * estimated_ftp),\n",
    "    'Zone 4 (Threshold)': (0.90 * estimated_ftp, 1.05 * estimated_ftp),\n",
    "    'Zone 5 (VO2 Max)': (1.05 * estimated_ftp, 1.20 * estimated_ftp),\n",
    "    'Zone 6 (Anaerobic)': (1.20 * estimated_ftp, 1.50 * estimated_ftp),\n",
    "    'Zone 7 (Neuromuscular)': (1.50 * estimated_ftp, float('inf'))\n",
    "}\n",
    "\n",
    "# Calculate time spent in each zone\n",
    "time_in_zones = {}\n",
    "for zone, (lower, upper) in power_zones.items():\n",
    "    time_in_zone = len(df_cycling[(df_cycling['power'] >= lower) & (df_cycling['power'] < upper)])\n",
    "    percentage = (time_in_zone / len(df_cycling)) * 100\n",
    "    time_in_zones[zone] = {\n",
    "        'seconds': time_in_zone,  # Each data point represents 1 second\n",
    "        'minutes': time_in_zone / 60,\n",
    "        'percentage': percentage\n",
    "    }\n",
    "\n",
    "# Display time in zones\n",
    "print(\"\\nTime in Power Zones:\")\n",
    "for zone, data in time_in_zones.items():\n",
    "    print(f\"  {zone}: {data['minutes']:.1f} minutes ({data['percentage']:.1f}%)\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f8505ca0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Visualize power data distribution\n",
    "plt.figure(figsize=(12, 6))\n",
    "sns.histplot(df_cycling['power'], bins=30, kde=True)\n",
    "plt.title('Power Distribution', fontsize=15)\n",
    "plt.xlabel('Power (watts)', fontsize=12)\n",
    "plt.ylabel('Frequency', fontsize=12)\n",
    "plt.axvline(average_power, color='r', linestyle='--', label=f'Average: {average_power:.1f}W')\n",
    "plt.axvline(estimated_ftp, color='g', linestyle='--', label=f'Est. FTP: {estimated_ftp:.1f}W')\n",
    "plt.legend()\n",
    "plt.grid(True, alpha=0.3)\n",
    "plt.show()\n",
    "\n",
    "# Power zones distribution pie chart\n",
    "zone_labels = list(time_in_zones.keys())\n",
    "zone_percentages = [data['percentage'] for data in time_in_zones.values()]\n",
    "\n",
    "plt.figure(figsize=(10, 8))\n",
    "plt.pie(zone_percentages, labels=zone_labels, autopct='%1.1f%%', startangle=90,\n",
    "        shadow=True, explode=[0.05]*len(zone_labels))\n",
    "plt.title('Time Spent in Power Zones', fontsize=15)\n",
    "plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "41a71369",
   "metadata": {},
   "source": [
    "## Power Analysis Over Time\n",
    "\n",
    "Let's analyze how your power output changes over the duration of the ride. This will help identify any patterns, fatigue, or intervals during the session."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6d490b76",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert timestamp to minutes since start for easier plotting\n",
    "start_time = df_cycling['timestamp'].min()\n",
    "df_cycling['minutes'] = (df_cycling['timestamp'] - start_time).dt.total_seconds() / 60\n",
    "\n",
    "# Create a power over time plot\n",
    "plt.figure(figsize=(14, 7))\n",
    "\n",
    "# Plot raw power data\n",
    "plt.plot(df_cycling['minutes'], df_cycling['power'], alpha=0.4, color='gray', label='Raw Power')\n",
    "\n",
    "# Create a smoothed power line (30-second moving average) to make the trend clearer\n",
    "window_size = 30  # 30 seconds\n",
    "df_cycling['power_smooth'] = df_cycling['power'].rolling(window=window_size, center=True).mean()\n",
    "plt.plot(df_cycling['minutes'], df_cycling['power_smooth'], linewidth=2.5, color='blue', label=f'{window_size}s Moving Average')\n",
    "\n",
    "# Add average power line\n",
    "plt.axhline(average_power, color='r', linestyle='--', label=f'Average: {average_power:.1f}W')\n",
    "\n",
    "# Add estimated FTP line\n",
    "plt.axhline(estimated_ftp, color='g', linestyle='--', label=f'Est. FTP: {estimated_ftp:.1f}W')\n",
    "\n",
    "# Formatting\n",
    "plt.title('Power Output Over Time', fontsize=15)\n",
    "plt.xlabel('Time (minutes)', fontsize=12)\n",
    "plt.ylabel('Power (watts)', fontsize=12)\n",
    "plt.grid(True, alpha=0.3)\n",
    "plt.legend()\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Calculate 20-minute best power (commonly used for FTP estimation)\n",
    "def rolling_average(data, window):\n",
    "    return data.rolling(window=window).mean()\n",
    "\n",
    "# Calculate various rolling averages\n",
    "windows = [5, 20, 60, 300, 1200]  # 5s, 20s, 1min, 5min, 20min in seconds\n",
    "best_powers = {}\n",
    "\n",
    "for window in windows:\n",
    "    window_name = f\"{window}s\"\n",
    "    rolling_power = rolling_average(df_cycling['power'], window)\n",
    "    best_power = rolling_power.max()\n",
    "    best_powers[window_name] = best_power\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ee05fec5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Display best powers\n",
    "print(\"Best Average Powers:\")\n",
    "for window, power in best_powers.items():\n",
    "    if int(window[:-1]) >= 60:\n",
    "        minutes = int(window[:-1]) / 60\n",
    "        print(f\"  Best {minutes:.1f} minute power: {power:.1f} watts\")\n",
    "    else:\n",
    "        print(f\"  Best {window} power: {power:.1f} watts\")\n",
    "\n",
    "# Estimate FTP based on 95% of 20-minute best power\n",
    "ftp_estimate = best_powers['1200s'] * 0.95\n",
    "print(f\"\\nFTP estimate (95% of 20min best): {ftp_estimate:.1f} watts\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "509ca17a",
   "metadata": {},
   "source": [
    "## Relationship Between Power, Heart Rate, and Cadence\n",
    "\n",
    "Let's explore how your power output relates to heart rate and cadence. This can provide insights into efficiency and how your body responds to different intensity levels."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "26e1a1e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Visualize heart rate over time with power overlay\n",
    "plt.figure(figsize=(14, 7))\n",
    "\n",
    "# Create two y axes\n",
    "ax1 = plt.gca()\n",
    "ax2 = ax1.twinx()\n",
    "\n",
    "# Plot heart rate on primary axis\n",
    "ax1.plot(df_cycling['minutes'], df_cycling['heart_rate'], color='red', alpha=0.4, label='Heart Rate')\n",
    "ax1.plot(df_cycling['minutes'], df_cycling['heart_rate'].rolling(window=30, center=True).mean(),\n",
    "         color='darkred', linewidth=2, label='Heart Rate (30s avg)')\n",
    "ax1.set_ylabel('Heart Rate (bpm)', color='darkred', fontsize=12)\n",
    "ax1.tick_params(axis='y', labelcolor='darkred')\n",
    "\n",
    "# Plot power on secondary axis\n",
    "ax2.plot(df_cycling['minutes'], df_cycling['power_smooth'], color='blue', linewidth=2, label='Power (30s avg)')\n",
    "ax2.set_ylabel('Power (watts)', color='blue', fontsize=12)\n",
    "ax2.tick_params(axis='y', labelcolor='blue')\n",
    "\n",
    "# Add title and grid\n",
    "plt.title('Heart Rate vs Power Over Time', fontsize=15)\n",
    "plt.xlabel('Time (minutes)', fontsize=12)\n",
    "plt.grid(True, alpha=0.3)\n",
    "\n",
    "# Create combined legend\n",
    "lines1, labels1 = ax1.get_legend_handles_labels()\n",
    "lines2, labels2 = ax2.get_legend_handles_labels()\n",
    "ax1.legend(lines1 + lines2, labels1 + labels2, loc='upper right')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "64af058b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate and display heart rate and power statistics\n",
    "avg_hr = df_cycling['heart_rate'].mean()\n",
    "max_hr = df_cycling['heart_rate'].max()\n",
    "\n",
    "print(f\"Heart Rate Statistics:\")\n",
    "print(f\"  Average Heart Rate: {avg_hr:.1f} bpm\")\n",
    "print(f\"  Maximum Heart Rate: {max_hr:.1f} bpm\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "339dfd24",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate average heart rate for each power zone\n",
    "print(\"\\nAverage Heart Rate by Power Zone:\")\n",
    "for zone, (lower, upper) in power_zones.items():\n",
    "    zone_data = df_cycling[(df_cycling['power'] >= lower) & (df_cycling['power'] < upper)]\n",
    "    if not zone_data.empty:\n",
    "        avg_zone_hr = zone_data['heart_rate'].mean()\n",
    "        print(f\"  {zone}: {avg_zone_hr:.1f} bpm\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a7ee6a91",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Scatter plot of power vs heart rate\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.scatterplot(data=df_cycling, x='power', y='heart_rate', alpha=0.3, color='purple')\n",
    "\n",
    "# Add a regression line\n",
    "sns.regplot(data=df_cycling, x='power', y='heart_rate', scatter=False, color='red',\n",
    "           line_kws={'linewidth': 2})\n",
    "\n",
    "plt.title('Relationship Between Power and Heart Rate', fontsize=15)\n",
    "plt.xlabel('Power (watts)', fontsize=12)\n",
    "plt.ylabel('Heart Rate (bpm)', fontsize=12)\n",
    "plt.grid(True, alpha=0.3)\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "fcde9936",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Scatter plot of power vs cadence\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.scatterplot(data=df_cycling, x='cadence', y='power', alpha=0.3, color='green')\n",
    "\n",
    "# Add a regression line\n",
    "sns.regplot(data=df_cycling, x='cadence', y='power', scatter=False, color='blue',\n",
    "           line_kws={'linewidth': 2})\n",
    "\n",
    "plt.title('Relationship Between Cadence and Power', fontsize=15)\n",
    "plt.xlabel('Cadence (rpm)', fontsize=12)\n",
    "plt.ylabel('Power (watts)', fontsize=12)\n",
    "plt.grid(True, alpha=0.3)\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ec3a7af",
   "metadata": {},
   "source": [
    "## Conclusion and Insights\n",
    "\n",
    "Based on the analysis of your Zwift cycling data, here are the key insights:\n",
    "\n",
    "1. **Power Output**: Your average power was 111.1 watts with a maximum of 376 watts. Your estimated FTP (Functional Threshold Power) is around 111-127 watts, based on different calculation methods.\n",
    "\n",
    "2. **Power Distribution**: You spent most of your time (44.1%) in Zone 3 (Tempo), followed by Zone 4 (Threshold) at 30.2%. This indicates a steady, moderately intense effort throughout the ride.\n",
    "\n",
    "3. **Power Variation**: The power output was relatively consistent throughout the ride, suggesting a steady pacing strategy with occasional higher intensity efforts.\n",
    "\n",
    "4. **Heart Rate**: Your average heart rate was 180.9 bpm, which is relatively high, with a maximum of 197 bpm. There was a slight positive correlation between power and heart rate, though heart rate remained fairly constant across power zones.\n",
    "\n",
    "5. **Cadence and Power**: There's a positive correlation between cadence and power, with most of your riding occurring at a cadence around 75-77 rpm.\n",
    "\n",
    "### Recommendations:\n",
    "\n",
    "1. **FTP Training**: Consider structured training to increase your FTP, which would improve your overall cycling performance.\n",
    "\n",
    "2. **Cadence Work**: Your optimal cadence appears to be around 75-80 rpm. You might benefit from cadence drills to improve efficiency.\n",
    "\n",
    "3. **Heart Rate Zones**: Your heart rate remained quite high throughout the session. Consider training that focuses on improving cardiovascular efficiency at lower heart rates.\n",
    "\n",
    "4. **Interval Training**: Adding structured intervals could help improve your power at various durations, especially for shorter, more intense efforts.\n",
    "\n",
    "These insights can help guide future training sessions to improve your cycling performance."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv (3.13.2)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
